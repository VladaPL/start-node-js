// * Event module
// Событие - это сигнал, сообщающий, что что-то произошло.
// При вводе данных пользователя для входа в приложение происходит их верификация,
// после чего они отправляются на сервер.
// При отправке данных можно повесить обработчик, который проверит на сервере есть ли
// эта информация о пользователе в системе.
// На ответ - сравнить инфу от пользователя и полученные данные.
// И создать еще один обработчик, который либо даст войти, либо отправит сообщение с ошибкой.
// На каждом из шагов может быть свой прослушиватель события и его обработчик.

// Очень наглядно такой подход показывает WebSocket.
// ! Протокол WebSocket («веб-сокет»),
// описанный в спецификации RFC 6455,
// обеспечивает возможность обмена данными между браузером и сервером через постоянное соединение.
// Данные передаются по нему в обоих направлениях в виде «пакетов»,
// без разрыва соединения и дополнительных HTTP-запросов.

const Logger = require('./log')
const logger = new Logger();



// создаем слежение за событием
logger.on('some_event', (args) => {
    const {id, text} = args;
    console.log(id, text);
});

// В app события, за которыми мы следим, а в log.js вызов самого события.

// Вызываем импортированную ф-ию.
logger.log('Пользователь зарегистрирован!!!');
