// * Buffer - порции данных, которые передаются от сервера на клиент.
// Это некое временное хранилище, которое предназначено для хранения куска данных, передающихся из одного места в другое.
// Данные (фильмы например) при отправке разбиваются на части, для оптимального времени загрузки.

// * Stream - это весь механизм передачи файла.
// Основная идея в том, чтобы за минимальное количество времени передать максимальную порцию данных,
// чтобы пользователь начал взаимодействие с ними еще до того, как они загрузились полностью.
// Пример стрима хоорошо видно на ютьюбе, когда видео начинается воспроизводиться еще до того, как полностью загрузится.

// * 4 основных типов потоков:
// Readabel
// Writable
// Duplex - когда происходит и чтение и запись.
// Transform - преобразующий, аналогичен дуплекс, но может изменять читаемые и записываемые данные.

const fs = require('fs');
// Добавим модуль сжатия для примера трасформирующего потока
const zlib = require('zlib');

const readStream = fs.createReadStream('./docs/text.txt');

// * 1) Создаем поток чтения
// chunk - порция данных

// readStream.on('data', (chunk) => {
//     console.log('-------');
//     console.log(chunk.toString());
// });


// * 2) Создаем поток записи
const writeStream = fs.createWriteStream('./docs/new-text.txt');

// readStream.on('data', (chunk) => {
//     writeStream.write('\n---CHUNK START---\n');
//     writeStream.write(chunk);
//     writeStream.write('\n---CHUNK END---\n');
// });

// * 4) Трансформирующая реализация потока
const compressStream = zlib.createGzip();

// * 3) Дуплексная реализация потока

const handleError = () => {
    console.log('Error');
    readStream.destroy(); // если при чтении ошибка, то уничножаем читающий поток
    writeStream.end('Finished with error...') // добавили информацию, что при чтении ошибка и сохраненный файл записан с ошибкой.
}

readStream
    .on('error', handleError) // слушает ошибки чтения и вызываеет обработчик
    .pipe(compressStream) // сжимаем данные
    .pipe(writeStream) // чтение данных из readStream и передает их в writeStreaam
    .on('error', handleError); // уничтожаем дальнейшее чтение и попытки записи, если ошибка.


