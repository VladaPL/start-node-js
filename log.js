// Сэкспортируем EventEmitter (класс), на основании которого
// мы будем создавать экземпляры для отслеживания различных событий.
const EventEmitter = require("events");

// ! Из-за того, что EventEmitter - это конструктор, чтобы пользоваться событиями нужно создать его экземпляр.
// Однако такой подход создает именно множественные экземпляры событий,
// поэтому разнесение логики по разным модулям приводит к тому, что события не реагируют так как должны.
// Для решения этой проблемы, от прямого использования EventEmitter отказываются.
// А вместо этого создают класс наследник (Logger), который берет все методы родителя.
// Расширяет его своими кастомными методами, после чего использует именно экземпляры данного класса потомка.
// Так получается общая связь событий.

class Logger extends EventEmitter {
    log = (msg) => {
        console.log(msg);
        this.emit("some_event", { id: 1, text: "Произошло событие!" });
    };
}

// вызов события
// первый аргумент - событие за которым следим, второй - данные (у нас в примере текст)

module.exports = Logger;

// ! Основная идея в том:
// что абсолютно в любых модулях с помощью метода ---.on можно создавать события,
// а в других, с помощью, метода ---.emit его вызывать.
